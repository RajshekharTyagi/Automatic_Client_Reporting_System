import { jsPDF } from 'jspdf';
import toast from 'react-hot-toast';

export const generateReportPDF = async (report) => {
  const loadingToast = toast.loading('Generating PDF...');
  
  try {
    // Create new PDF document
    const pdf = new jsPDF();
    
    // Format filename
    const reportDate = report.generated_at || report.created_at;
    const formattedDate = new Date(reportDate).toLocaleDateString('en-US', {
      month: 'long',
      year: 'numeric'
    }).replace(/\s+/g, '');
    
    // Get client name from profiles or user_id or default to 'Client'
    const clientName = (report.profiles?.full_name || report.user_id || 'Client')
      .replace(/[^a-zA-Z0-9]/g, '_');
    const filename = `${clientName}_Report_${formattedDate}.pdf`;
    
    // Add content to PDF
    pdf.setFontSize(20);
    pdf.text('Client Report', 20, 30);
    
    pdf.setFontSize(12);
    pdf.text(`File: ${report.files?.file_name || 'Unknown'}`, 20, 50);
    pdf.text(`Generated: ${new Date(reportDate).toLocaleDateString()}`, 20, 60);
    pdf.text(`Generated by: ${report.profiles?.full_name || 'System'}`, 20, 70);
    
    pdf.setFontSize(14);
    pdf.text('Summary:', 20, 90);
    
    pdf.setFontSize(10);
    const splitSummary = pdf.splitTextToSize(report.summary || 'No summary available', 170);
    pdf.text(splitSummary, 20, 100);
    
    // Save the PDF
    pdf.save(filename);
    
    toast.dismiss(loadingToast);
    toast.success('PDF downloaded successfully!');
    
  } catch (error) {
    console.error('PDF generation failed:', error);
    toast.dismiss(loadingToast);
    toast.error('Failed to generate PDF');
  }
};
