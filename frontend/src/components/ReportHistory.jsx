import React, { useState, useEffect } from 'react'
import { FileText, Calendar, Download } from 'lucide-react'
import { supabase } from '../lib/supabase'

const ReportHistory = ({ selectedProject }) => {
  const [reports, setReports] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (selectedProject) {
      fetchReports()
    }
  }, [selectedProject])

  const fetchReports = async () => {
    try {
      setLoading(true)
      const { data, error } = await supabase
        .from('reports')
        .select(`
          *,
          files(file_name, file_size),
          profiles(full_name)
        `)
        .eq('project_id', selectedProject.id)
        .order('generated_at', { ascending: false })

      if (error) throw error
      setReports(data || [])
    } catch (error) {
      console.error('Error fetching reports:', error)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Report History</h2>
        <div className="loading-spinner mx-auto"></div>
      </div>
    )
  }

  return (
    <div className="card">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Report History</h2>
      
      {reports.length === 0 ? (
        <div className="text-center py-8">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No reports yet. Upload a file to get started.</p>
        </div>
      ) : (
        <div className="space-y-4">
          {reports.map((report) => (
            <div key={report.id} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <FileText className="h-5 w-5 text-gray-400" />
                  <div>
                    <h3 className="font-medium text-gray-900">{report.title}</h3>
                    <div className="flex items-center space-x-2 text-sm text-gray-500">
                      <Calendar className="h-4 w-4" />
                      <span>{new Date(report.generated_at).toLocaleDateString()}</span>
                    </div>
                    <div className="text-xs text-gray-500">
                      File: {report.files?.file_name || 'Unknown'}
                    </div>
                  </div>
                </div>
                <button 
                  className="btn-secondary flex items-center space-x-1"
                  onClick={() => downloadReport(report)}
                >
                  <Download className="h-4 w-4" />
                  <span>Download</span>
                </button>
              </div>
              
              {report.summary && (
                <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                  <h4 className="font-medium text-gray-900 mb-2">AI Summary</h4>
                  <p className="text-sm text-gray-700">{report.summary}</p>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

  const downloadReport = (report) => {
    const content = `Report Summary\n\nTitle: ${report.title}\nFile: ${report.files?.file_name || 'Unknown'}\nGenerated: ${new Date(report.generated_at).toLocaleString()}\nGenerated by: ${report.profiles?.full_name || 'Unknown'}\n\n${report.summary}`
    
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `report-${report.title?.replace(/[^a-zA-Z0-9]/g, '_') || 'summary'}-${new Date(report.generated_at).toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

export default ReportHistory