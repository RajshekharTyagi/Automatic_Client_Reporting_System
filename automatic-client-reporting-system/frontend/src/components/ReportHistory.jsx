import React, { useState, useEffect } from 'react'
import { FileText, Calendar, User, Download, Search, Filter } from 'lucide-react'
import { supabase } from '../lib/supabase'

export default function ReportHistory({ selectedProject }) {
  const [reports, setReports] = useState([])
  const [loading, setLoading] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState('newest')

  useEffect(() => {
    if (selectedProject) {
      fetchReports()
    } else {
      setReports([])
    }
  }, [selectedProject])

  const fetchReports = async () => {
    setLoading(true)
    try {
      const { data, error } = await supabase
        .from('reports')
        .select(`
          *,
          files(file_name, file_size),
          profiles(full_name)
        `)
        .eq('project_id', selectedProject.id)
        .order('generated_at', { ascending: false })

      if (error) throw error
      setReports(data || [])
    } catch (error) {
      console.error('Error fetching reports:', error)
    } finally {
      setLoading(false)
    }
  }

  // Listen for new reports
  useEffect(() => {
    if (!selectedProject) return

    const subscription = supabase
      .channel('reports')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'reports',
          filter: `project_id=eq.${selectedProject.id}`,
        },
        () => {
          fetchReports()
        }
      )
      .subscribe()

    return () => {
      subscription.unsubscribe()
    }
  }, [selectedProject])

  const filteredAndSortedReports = reports
    .filter(report => 
      !searchTerm || 
      report.summary.toLowerCase().includes(searchTerm.toLowerCase()) ||
      report.files?.file_name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      switch (sortBy) {
        case 'oldest':
          return new Date(a.generated_at) - new Date(b.generated_at)
        case 'filename':
          return (a.files?.file_name || '').localeCompare(b.files?.file_name || '')
        case 'newest':
        default:
          return new Date(b.generated_at) - new Date(a.generated_at)
      }
    })

  const formatFileSize = (bytes) => {
    if (!bytes) return 'Unknown size'
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(1024))
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]
  }

  const downloadReport = (report) => {
    const content = `Report Summary\n\nFile: ${report.files?.file_name || 'Unknown'}\nGenerated: ${new Date(report.generated_at).toLocaleString()}\nGenerated by: ${report.profiles?.full_name || 'Unknown'}\n\n${report.summary}`
    
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `report-${report.files?.file_name || 'summary'}-${new Date(report.generated_at).toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (!selectedProject) {
    return (
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Report History</h2>
        <div className="text-center py-12 text-gray-500">
          <FileText className="h-16 w-16 mx-auto mb-4 text-gray-300" />
          <p className="text-lg font-medium">Select a project to view reports</p>
          <p className="text-sm">Upload files to generate AI-powered summaries</p>
        </div>
      </div>
    )
  }

  return (
    <div className="card">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-lg font-semibold text-gray-900">
          Report History - {selectedProject.name}
        </h2>
        <div className="text-sm text-gray-500">
          {reports.length} report{reports.length !== 1 ? 's' : ''}
        </div>
      </div>

      {reports.length > 0 && (
        <div className="mb-4 space-y-3">
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search reports..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 input-field"
              />
            </div>
            <div className="relative">
              <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="pl-10 input-field appearance-none bg-white"
              >
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="filename">By Filename</option>
              </select>
            </div>
          </div>
        </div>
      )}

      {loading ? (
        <div className="text-center py-8">
          <div className="loading-spinner mx-auto mb-2"></div>
          <p className="text-gray-500">Loading reports...</p>
        </div>
      ) : filteredAndSortedReports.length === 0 ? (
        <div className="text-center py-12 text-gray-500">
          <FileText className="h-16 w-16 mx-auto mb-4 text-gray-300" />
          <p className="text-lg font-medium">
            {reports.length === 0 ? 'No reports yet' : 'No reports match your search'}
          </p>
          <p className="text-sm">
            {reports.length === 0 ? 'Upload files to generate AI-powered summaries' : 'Try adjusting your search terms'}
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {filteredAndSortedReports.map((report) => (
            <div key={report.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <FileText className="h-5 w-5 text-primary-600" />
                  <h3 className="font-medium text-gray-900">
                    {report.files?.file_name || 'Unknown File'}
                  </h3>
                </div>
                <button
                  onClick={() => downloadReport(report)}
                  className="flex items-center space-x-1 text-sm text-primary-600 hover:text-primary-700"
                >
                  <Download className="h-4 w-4" />
                  <span>Download</span>
                </button>
              </div>
              
              <div className="mb-3">
                <p className="text-gray-700 text-sm leading-relaxed">
                  {report.summary}
                </p>
              </div>
              
              <div className="flex items-center justify-between text-xs text-gray-500">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-1">
                    <Calendar className="h-3 w-3" />
                    <span>{new Date(report.generated_at).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <User className="h-3 w-3" />
                    <span>{report.profiles?.full_name || 'Unknown'}</span>
                  </div>
                </div>
                <div className="text-gray-400">
                  {formatFileSize(report.files?.file_size)}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

